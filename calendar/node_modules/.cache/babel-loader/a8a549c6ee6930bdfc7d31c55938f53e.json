{"ast":null,"code":"var _jsxFileName = \"/Users/shiuanhsieh/Documents/109-1/web_program/final-project/rbc-starter/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'; //import Login from './Login'\n\nimport { ApolloClient, InMemoryCache } from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { split } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities'; // Create an http link:\n\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:4000/'\n}); // Create a WebSocket link:\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:4000/`,\n  options: {\n    reconnect: true\n  }\n}); // using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\n\nconst link = split( // split based on operation type\n({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n}, wsLink, httpLink);\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache().restore({})\n});\nconst wrappedApp = /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }\n}));\nReactDOM.render(wrappedApp, document.getElementById('root'));","map":{"version":3,"sources":["/Users/shiuanhsieh/Documents/109-1/web_program/final-project/rbc-starter/src/index.js"],"names":["React","ReactDOM","App","ApolloClient","InMemoryCache","ApolloProvider","split","HttpLink","WebSocketLink","getMainDefinition","httpLink","uri","wsLink","options","reconnect","link","query","definition","kind","operation","client","cache","restore","wrappedApp","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CACA;;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,cAA5C;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,iBAAT,QAAkC,kBAAlC,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,IAAIH,QAAJ,CAAa;AAC5BI,EAAAA,GAAG,EAAE;AADuB,CAAb,CAAjB,C,CAIA;;AACA,MAAMC,MAAM,GAAG,IAAIJ,aAAJ,CAAkB;AAC/BG,EAAAA,GAAG,EAAG,sBADyB;AAE/BE,EAAAA,OAAO,EAAE;AAAEC,IAAAA,SAAS,EAAE;AAAb;AAFsB,CAAlB,CAAf,C,CAKA;AACA;;AACA,MAAMC,IAAI,GAAGT,KAAK,EAChB;AACA,CAAC;AAAEU,EAAAA;AAAF,CAAD,KAAe;AACb,QAAMC,UAAU,GAAGR,iBAAiB,CAACO,KAAD,CAApC;AACA,SACEC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF3B;AAID,CARe,EAShBP,MATgB,EAUhBF,QAVgB,CAAlB;AAaA,MAAMU,MAAM,GAAG,IAAIjB,YAAJ,CAAiB;AAC9BY,EAAAA,IAD8B;AAE9BM,EAAAA,KAAK,EAAE,IAAIjB,aAAJ,GAAoBkB,OAApB,CAA4B,EAA5B;AAFuB,CAAjB,CAAf;AAKA,MAAMC,UAAU,gBACd,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEH,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF;AAOAnB,QAAQ,CAACuB,MAAT,CAAgBD,UAAhB,EAA4BE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA5B","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n//import Login from './Login'\nimport { ApolloClient, InMemoryCache } from 'apollo-boost'\nimport { ApolloProvider } from 'react-apollo'\nimport { split } from 'apollo-link'\nimport { HttpLink } from 'apollo-link-http'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { getMainDefinition } from 'apollo-utilities'\n\n// Create an http link:\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:4000/'\n})\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:4000/`,\n  options: { reconnect: true }\n})\n\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    )\n  },\n  wsLink,\n  httpLink\n)\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache().restore({})\n})\n\nconst wrappedApp = (\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n)\n\n\nReactDOM.render(wrappedApp, document.getElementById('root'))\n\n"]},"metadata":{},"sourceType":"module"}